# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from beoremote-cli import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beoremote-cli import schemas  # noqa: F401



class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class adjustment(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        bass = schemas.IntSchema
                        treble = schemas.IntSchema
                        loudness = schemas.BoolSchema
                        
                        
                        class _capabilities(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    
                                    
                                    class editable(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            items = schemas.StrSchema
                                    
                                        def __new__(
                                            cls,
                                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'editable':
                                            return super().__new__(
                                                cls,
                                                _arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    
                                    
                                    class range(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                
                                                
                                                class bass(
                                                    schemas.ListSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        
                                                        class items(
                                                            schemas.DictSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                
                                                                class properties:
                                                                    min = schemas.IntSchema
                                                                    max = schemas.IntSchema
                                                                    step = schemas.IntSchema
                                                                    __annotations__ = {
                                                                        "min": min,
                                                                        "max": max,
                                                                        "step": step,
                                                                    }
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["step"]) -> MetaOapg.properties.step: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                            
                                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["min", "max", "step", ], str]):
                                                                # dict_instance[name] accessor
                                                                return super().__getitem__(name)
                                                            
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> typing.Union[MetaOapg.properties.min, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union[MetaOapg.properties.max, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["step"]) -> typing.Union[MetaOapg.properties.step, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                            
                                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["min", "max", "step", ], str]):
                                                                return super().get_item_oapg(name)
                                                            
                                                        
                                                            def __new__(
                                                                cls,
                                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                                min: typing.Union[MetaOapg.properties.min, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                max: typing.Union[MetaOapg.properties.max, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                step: typing.Union[MetaOapg.properties.step, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                            ) -> 'items':
                                                                return super().__new__(
                                                                    cls,
                                                                    *_args,
                                                                    min=min,
                                                                    max=max,
                                                                    step=step,
                                                                    _configuration=_configuration,
                                                                    **kwargs,
                                                                )
                                                
                                                    def __new__(
                                                        cls,
                                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                    ) -> 'bass':
                                                        return super().__new__(
                                                            cls,
                                                            _arg,
                                                            _configuration=_configuration,
                                                        )
                                                
                                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                                        return super().__getitem__(i)
                                                
                                                
                                                class treble(
                                                    schemas.ListSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        
                                                        class items(
                                                            schemas.DictSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                
                                                                class properties:
                                                                    min = schemas.IntSchema
                                                                    max = schemas.IntSchema
                                                                    step = schemas.IntSchema
                                                                    __annotations__ = {
                                                                        "min": min,
                                                                        "max": max,
                                                                        "step": step,
                                                                    }
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["step"]) -> MetaOapg.properties.step: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                            
                                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["min", "max", "step", ], str]):
                                                                # dict_instance[name] accessor
                                                                return super().__getitem__(name)
                                                            
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> typing.Union[MetaOapg.properties.min, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union[MetaOapg.properties.max, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["step"]) -> typing.Union[MetaOapg.properties.step, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                            
                                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["min", "max", "step", ], str]):
                                                                return super().get_item_oapg(name)
                                                            
                                                        
                                                            def __new__(
                                                                cls,
                                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                                min: typing.Union[MetaOapg.properties.min, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                max: typing.Union[MetaOapg.properties.max, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                step: typing.Union[MetaOapg.properties.step, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                            ) -> 'items':
                                                                return super().__new__(
                                                                    cls,
                                                                    *_args,
                                                                    min=min,
                                                                    max=max,
                                                                    step=step,
                                                                    _configuration=_configuration,
                                                                    **kwargs,
                                                                )
                                                
                                                    def __new__(
                                                        cls,
                                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                    ) -> 'treble':
                                                        return super().__new__(
                                                            cls,
                                                            _arg,
                                                            _configuration=_configuration,
                                                        )
                                                
                                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                                        return super().__getitem__(i)
                                                __annotations__ = {
                                                    "bass": bass,
                                                    "treble": treble,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["bass"]) -> MetaOapg.properties.bass: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["treble"]) -> MetaOapg.properties.treble: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["bass", "treble", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["bass"]) -> typing.Union[MetaOapg.properties.bass, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["treble"]) -> typing.Union[MetaOapg.properties.treble, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bass", "treble", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            bass: typing.Union[MetaOapg.properties.bass, list, tuple, schemas.Unset] = schemas.unset,
                                            treble: typing.Union[MetaOapg.properties.treble, list, tuple, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'range':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                bass=bass,
                                                treble=treble,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    __annotations__ = {
                                        "editable": editable,
                                        "range": range,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["editable"]) -> MetaOapg.properties.editable: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["range"]) -> MetaOapg.properties.range: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["editable", "range", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["editable"]) -> typing.Union[MetaOapg.properties.editable, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["range"]) -> typing.Union[MetaOapg.properties.range, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["editable", "range", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                editable: typing.Union[MetaOapg.properties.editable, list, tuple, schemas.Unset] = schemas.unset,
                                range: typing.Union[MetaOapg.properties.range, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> '_capabilities':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    editable=editable,
                                    range=range,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class _links(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    
                                    
                                    class relation_modify(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                href = schemas.StrSchema
                                                __annotations__ = {
                                                    "href": href,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["href", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> typing.Union[MetaOapg.properties.href, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["href", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            href: typing.Union[MetaOapg.properties.href, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'relation_modify':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                href=href,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class relation_reset(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                href = schemas.StrSchema
                                                __annotations__ = {
                                                    "href": href,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["href", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> typing.Union[MetaOapg.properties.href, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["href", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            href: typing.Union[MetaOapg.properties.href, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'relation_reset':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                href=href,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    __annotations__ = {
                                        "/relation/modify": relation_modify,
                                        "/relation/reset": relation_reset,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["/relation/modify"]) -> MetaOapg.properties.relation_modify: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["/relation/reset"]) -> MetaOapg.properties.relation_reset: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["/relation/modify", "/relation/reset", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["/relation/modify"]) -> typing.Union[MetaOapg.properties.relation_modify, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["/relation/reset"]) -> typing.Union[MetaOapg.properties.relation_reset, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["/relation/modify", "/relation/reset", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> '_links':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "bass": bass,
                            "treble": treble,
                            "loudness": loudness,
                            "_capabilities": _capabilities,
                            "_links": _links,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bass"]) -> MetaOapg.properties.bass: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["treble"]) -> MetaOapg.properties.treble: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["loudness"]) -> MetaOapg.properties.loudness: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["_capabilities"]) -> MetaOapg.properties._capabilities: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["_links"]) -> MetaOapg.properties._links: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["bass", "treble", "loudness", "_capabilities", "_links", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bass"]) -> typing.Union[MetaOapg.properties.bass, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["treble"]) -> typing.Union[MetaOapg.properties.treble, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["loudness"]) -> typing.Union[MetaOapg.properties.loudness, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["_capabilities"]) -> typing.Union[MetaOapg.properties._capabilities, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union[MetaOapg.properties._links, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bass", "treble", "loudness", "_capabilities", "_links", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    bass: typing.Union[MetaOapg.properties.bass, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    treble: typing.Union[MetaOapg.properties.treble, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    loudness: typing.Union[MetaOapg.properties.loudness, bool, schemas.Unset] = schemas.unset,
                    _capabilities: typing.Union[MetaOapg.properties._capabilities, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _links: typing.Union[MetaOapg.properties._links, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'adjustment':
                    return super().__new__(
                        cls,
                        *_args,
                        bass=bass,
                        treble=treble,
                        loudness=loudness,
                        _capabilities=_capabilities,
                        _links=_links,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "adjustment": adjustment,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjustment"]) -> MetaOapg.properties.adjustment: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["adjustment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjustment"]) -> typing.Union[MetaOapg.properties.adjustment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["adjustment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        adjustment: typing.Union[MetaOapg.properties.adjustment, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            adjustment=adjustment,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _get_sound_adjustment_oapg(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _get_sound_adjustment_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _get_sound_adjustment_oapg(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _get_sound_adjustment_oapg(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Product Sound Adjustment
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class GetSoundAdjustment(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def get_sound_adjustment(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get_sound_adjustment(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get_sound_adjustment(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get_sound_adjustment(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_sound_adjustment_oapg(
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_sound_adjustment_oapg(
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


